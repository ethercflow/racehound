#!/bin/sh

########################################################################
# This test checks if RaceHound finds simple races in a a kernel module.
#
# Usage:
#   sh test.sh [--all] [--atomic]
#
# Without "--all", the SW BPs are set only for the instruction reading
# the variable in hello_plus() function of the target. With "--all" - for
# both the reading and the writing of the variable.
#
# If "--atomic" is specified, the operations on that variable are
# performed in atomic context in hello_plus() (namely, under spinlock).
########################################################################

# Just in case the tools like insmod/rmmod are not in their usual locations.
export PATH=$PATH:/sbin:/bin:/usr/bin:/usr/sbin
########################################################################

# A function to check prerequisites: whether the necessary files exist,
# etc.
checkPrereqs()
{
	if test ! -f "${CORE_MODULE}"; then
		printf "The core module is missing: ${CORE_MODULE}\n"
		exit 1
	fi

	if test ! -f "${TARGET_MODULE}"; then
		printf "The target module is missing: ${TARGET_MODULE}\n"
		exit 1
	fi

	if test ! -f "${BPS_FILE}"; then
		printf "The list of breakpoints is missing: ${BPS_FILE}\n"
	fi
}
########################################################################

cleanupTargets()
{
	printf "Cleaning up the target(s)...\n"

	lsmod | grep "${TARGET_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${TARGET_NAME}"
	fi
}
########################################################################

# Cleanup function
cleanupAll()
{
	cd "${WORK_DIR}"

	cleanupTargets

	lsmod | grep "${CORE_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${CORE_MODULE_NAME}"
	fi
}
########################################################################

loadTarget()
{
	insmod "${TARGET_MODULE}" "${TEST_ATOMIC_PARAM}"
	if test $? -ne 0; then
		printf "Failed to load the target module: ${TARGET_MODULE}\n"
		cleanupAll
		exit 1
	fi
}

unloadTarget()
{
	lsmod | grep "${TARGET_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${TARGET_NAME}"
		if test $? -ne 0; then
			printf "Failed to unload the module: ${TARGET_NAME}\n"
			cleanupAll
			exit 1
		fi
	fi
}
########################################################################

doTestImpl()
{
	# The test itself.
	# The repeated operations run concurrently: one in backgroud and one
	# in the current thread.
	sh @CMAKE_CURRENT_SOURCE_DIR@/plus.sh &

	# Store pid to wait for after the test.
	plus_pid=$!

	sh @CMAKE_CURRENT_SOURCE_DIR@/minus.sh

	# Wait until the background process is finished.
	wait ${plus_pid}
}

checkFoundRaces()
{
	race_count=$(cat "${DEBUGFS_DIR}/racehound/race_count")
	if test -z "${race_count}"; then
		printf "Failed to read the race counter.\n"
		cleanupAll
		exit 1
	elif test "t${race_count}" = "t0"; then
		printf "No races found.\n"
		cleanupAll
		exit 1
	else
		printf "Found ${race_count} race(s).\n"
	fi
}

doTest()
{
	if ! insmod ${CORE_MODULE}; then
		printf "Failed to load RaceHound.\n"
		cleanupAll
		exit 1
	fi

	loadTarget

	bp_list_file="${DEBUGFS_DIR}/racehound/breakpoints"

	success=0
	for bp in $(cat "${BPS_FILE}"); do
		printf "Trying to set BP ${bp}...\n"
		echo "${bp}" > "${bp_list_file}"
		if test $? -eq 0; then
			printf "Successfully set BP \"${bp}\".\n"
			success=1
		else
			printf "Failed to set BP \"${bp}\", continuing...\n"
		fi
	done

	printf "Here is the list of BPs that were set:\n"
	cat "${bp_list_file}"

	if test ${success} -eq 0; then
		printf "Error: no BPs were set.\n"
		cleanupAll
		exit 1
	fi

	printf "The first test run.\n"
	doTestImpl
	checkFoundRaces

	printf "Clearing the race counter.\n"
	echo 0 > "${DEBUGFS_DIR}/racehound/race_count"
	race_count=$(cat "${DEBUGFS_DIR}/racehound/race_count")
	if test "t${race_count}" != "t0"; then
		printf "Failed to clear the race counter.\n"
		cleanupAll
		exit 1
	fi

	# Clear the list of the BPs to check if it works and then re-add them.
	echo "clear" > "${bp_list_file}"
	success=1
	for bp in $(cat "${bp_list_file}"); do
		success=0
	done

	if test ${success} -ne 1; then
		printf "Failed to clear the list of BPs. Here is what remains set:\n"
		cat "${bp_list_file}"
		cleanupAll
		exit 1
	fi

	printf "Successfully cleared the list of BPs.\n"

	success=0
	for bp in $(cat "${BPS_FILE}"); do
		printf "Trying to set BP ${bp}...\n"
		echo "${bp}" > "${bp_list_file}"
		if test $? -eq 0; then
			printf "Successfully set BP \"${bp}\".\n"
			success=1
		else
			printf "Failed to set BP \"${bp}\", continuing...\n"
		fi
	done

	if test ${success} -eq 0; then
		printf "Error: no BPs were set after \"clear\".\n"
		cleanupAll
		exit 1
	fi

	# Run the test again to check if the counter still works.
	printf "The second test run.\n"
	doTestImpl
	checkFoundRaces

	printf "Clearing the race counter again.\n"
	echo 0 > "${DEBUGFS_DIR}/racehound/race_count"
	race_count=$(cat "${DEBUGFS_DIR}/racehound/race_count")
	if test "t${race_count}" != "t0"; then
		printf "Failed to clear the race counter.\n"
		cleanupAll
		exit 1
	fi

	# Now remove all the BPs, run the test again and check that
	# no races are found this time.
	for bp in $(cat "${BPS_FILE}"); do
		printf "Trying to remove BP ${bp}...\n"
		echo "-${bp}" > "${bp_list_file}"
		if test $? -eq 0; then
			printf "Successfully removed BP \"${bp}\".\n"
		else
			printf "Failed to removed BP \"${bp}\", continuing...\n"
		fi
	done

	success=1
	for bp in $(cat "${bp_list_file}"); do
		success=0
	done

	if test ${success} -ne 1; then
		printf "Failed to remove BPs. Here is what remains set:\n"
		cat "${bp_list_file}"
	fi

	printf "The third test run. No races should be found this time.\n"
	doTestImpl
	race_count=$(cat "${DEBUGFS_DIR}/racehound/race_count")
	if test "t${race_count}" != "t0"; then
		printf "The race counter is not 0: ${race_count}.\n"
		cleanupAll
		exit 1
	fi

	unloadTarget

	if ! rmmod "${CORE_MODULE_NAME}"; then
		printf "Failed to remove \"${CORE_MODULE_NAME}\" module.\n"
		cleanupAll
		exit 1
	fi
}
########################################################################

WORK_DIR=${PWD}
CORE_MODULE_NAME=racehound
CORE_MODULE="@CMAKE_BINARY_DIR@/core/${CORE_MODULE_NAME}.ko"
TARGET_NAME="test_simple"
TARGET_MODULE="@CMAKE_BINARY_DIR@/core/tests/simple/${TARGET_NAME}.ko"
BPS_SINGLE_FILE="@BPS_SINGLE_FILE@"
BPS_ALL_FILE="@BPS_ALL_FILE@"

TEST_ATOMIC_PARAM=""
if test "t$1" = "t--atomic" || test "t$2" = "t--atomic"; then
	TEST_ATOMIC_PARAM="test_atomic=1"
fi

BPS_FILE="${BPS_SINGLE_FILE}"
if test "t$1" = "t--all" || test "t$2" = "t--all"; then
	BPS_FILE="${BPS_ALL_FILE}"
fi

checkPrereqs

# Mount debugfs to /sys/kernel/debug if it is not already mounted there,
# the output system needs that.
# The real users will need to mount it there too.
DEBUGFS_DIR="/sys/kernel/debug"
mount | grep "${DEBUGFS_DIR}" > /dev/null
if test $? -ne 0; then
	mount -t debugfs none "${DEBUGFS_DIR}"
	if test $? -ne 0; then
		printf "Failed to mount debugfs to ${DEBUGFS_DIR}.\n"
		exit 1
	fi
fi

doTest
cleanupAll

# Test passed
exit 0
