#!/bin/sh

########################################################################
# This test checks attaching RaceHound to and detaching it from the
# actively working kernel modules.
#
# Usage:
#   sh test_active.sh
########################################################################

# Just in case the tools like insmod/rmmod are not in their usual locations.
export PATH=$PATH:/sbin:/bin:/usr/bin:/usr/sbin
########################################################################

# A function to check prerequisites: whether the necessary files exist,
# etc.
checkPrereqs()
{
	if test ! -f "${CORE_MODULE}"; then
		printf "The core module is missing: ${CORE_MODULE}\n"
		exit 1
	fi

	if test ! -f "${TARGET_MODULE}"; then
		printf "The target module is missing: ${TARGET_MODULE}\n"
		exit 1
	fi

	if test ! -f "${COMMON_TARGET_MODULE}"; then
		printf "The target module is missing: ${COMMON_TARGET_MODULE}\n"
		exit 1
	fi

	if test ! -f "${BPS_FILE}"; then
		printf "The list of breakpoints is missing: ${BPS_FILE}\n"
	fi

	if test ! -f "${BPS_SINGLE_FILE}"; then
		printf "The list of breakpoints is missing: ${BPS_SINGLE_FILE}\n"
	fi
}
########################################################################

cleanupTargets()
{
	printf "Cleaning up the target(s)...\n"

	lsmod | grep "${TARGET_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${TARGET_NAME}"
	fi

	lsmod | grep "${COMMON_TARGET_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${COMMON_TARGET_NAME}"
	fi
}
########################################################################

# Cleanup function
cleanupAll()
{
	cd "${WORK_DIR}"

	cleanupTargets

	lsmod | grep "${CORE_MODULE_NAME}" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "${CORE_MODULE_NAME}"
	fi
}
########################################################################

# $1 - name of the module to unload
unloadTarget()
{
	lsmod | grep "$1" > /dev/null 2>&1
	if test $? -eq 0; then
		rmmod "$1"
		if test $? -ne 0; then
			printf "Failed to unload the module: $1\n"
			cleanupAll
			exit 1
		fi
	fi
}

checkFoundRaces()
{
	race_count=$(cat "${DEBUGFS_DIR}/racehound/race_count")
	if test -z "${race_count}"; then
		printf "Failed to read the race counter.\n"
		RESULT=1 # fail
	elif test "t${race_count}" = "t0"; then
		printf "No races found.\n"
		RESULT=1 # fail
	else
		printf "Found ${race_count} race(s).\n"
	fi
}

doTest()
{
	# First, load "test_simple" target and make it busy.
	insmod "${TARGET_MODULE}"
	if test $? -ne 0; then
		printf "Failed to load the target module: \"${TARGET_MODULE}\"\n"
		cleanupAll
		exit 1
	fi

	sh @CMAKE_CURRENT_SOURCE_DIR@/plus_infinite.sh &
	plus_pid=$!

	sh @CMAKE_CURRENT_SOURCE_DIR@/minus_infinite.sh &
	minus_pid=$!

	sleep 5s

	# Now load RaceHound and attach it to the target
	if ! insmod ${CORE_MODULE}; then
		printf "Failed to load RaceHound.\n"
		kill -9 ${plus_pid}
		kill -9 ${minus_pid}
		cleanupAll
		exit 1
	fi

	bp_list_file="${DEBUGFS_DIR}/racehound/breakpoints"

	success=0
	for bp in $(cat "${BPS_FILE}"); do
		#printf "Trying to set BP ${bp}...\n"
		echo "${bp}" > "${bp_list_file}"
		if test $? -eq 0; then
			printf "Successfully set BP \"${bp}\".\n"
			success=1
		else
			printf "Failed to set BP \"${bp}\", continuing...\n"
		fi
	done

	if test ${success} -eq 0; then
		printf "Error: no BPs were set.\n"
		kill -9 ${plus_pid}
		kill -9 ${minus_pid}
		cleanupAll
		exit 1
	fi

	# Load the second target, just in case, and touch it too.
	insmod "${COMMON_TARGET_MODULE}"
	if test $? -ne 0; then
		printf "Failed to load the target module: \"${COMMON_TARGET_MODULE}\"\n"
		kill -9 ${plus_pid}
		kill -9 ${minus_pid}
		cleanupAll
		exit 1
	fi
	echo "something" > /dev/cfake0
	echo "something" > /dev/cfake1

	# Wait a bit more and check that some races have been found
	# in test_simple.
	sleep 5s
	checkFoundRaces

	# Remove some of the BPs.
	for bp in $(cat "${BPS_SINGLE_FILE}"); do
		echo "-${bp}" > "${bp_list_file}"
		if test $? -eq 0; then
			printf "Successfully removed BP \"${bp}\".\n"
		else
			printf "Failed to removed BP \"${bp}\", continuing...\n"
		fi
	done

	# Unload RaceHound while the targets are still working.
	if ! rmmod "${CORE_MODULE_NAME}"; then
		printf "Failed to remove \"${CORE_MODULE_NAME}\" module.\n"
		RESULT=1
	fi

	# Touch the second target again to see if any system errors show up.
	echo "test" > /dev/cfake0
	echo "test" > /dev/cfake1

	# Give the targets a bit more time and stop them.
	kill ${plus_pid}
	kill ${minus_pid}
	wait ${plus_pid}
	wait ${minus_pid}

	unloadTarget "${TARGET_NAME}"
	unloadTarget "${COMMON_TARGET_NAME}"
}
########################################################################

WORK_DIR=${PWD}

CORE_MODULE_NAME=racehound
CORE_MODULE="@CMAKE_BINARY_DIR@/core/${CORE_MODULE_NAME}.ko"
TARGET_NAME="test_simple"
TARGET_MODULE="@CMAKE_BINARY_DIR@/core/tests/simple/${TARGET_NAME}.ko"
COMMON_TARGET_NAME="test_common_target"
COMMON_TARGET_MODULE="@CMAKE_BINARY_DIR@/core/tests/common_target/${COMMON_TARGET_NAME}.ko"

BPS_SINGLE_FILE="@CMAKE_CURRENT_BINARY_DIR@/breakpoints-single.list"
BPS_FILE="@CMAKE_CURRENT_BINARY_DIR@/breakpoints-all.list"

checkPrereqs

# Mount debugfs to /sys/kernel/debug if it is not already mounted there,
# the output system needs that.
DEBUGFS_DIR="/sys/kernel/debug"
mount | grep "${DEBUGFS_DIR}" > /dev/null
if test $? -ne 0; then
	mount -t debugfs none "${DEBUGFS_DIR}"
	if test $? -ne 0; then
		printf "Failed to mount debugfs to ${DEBUGFS_DIR}.\n"
		exit 1
	fi
fi

RESULT=0
doTest
cleanupAll

exit ${RESULT}
